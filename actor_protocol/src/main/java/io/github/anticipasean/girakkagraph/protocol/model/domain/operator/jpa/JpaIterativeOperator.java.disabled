package io.github.anticipasean.girakkagraph.protocol.model.domain.operator.jpa;

import io.github.anticipasean.girakkagraph.protocol.model.domain.arity.Arity;
import io.github.anticipasean.girakkagraph.protocol.model.domain.filter.Membership;
import io.github.anticipasean.girakkagraph.protocol.model.domain.supplier.jpa.ExpressionSupplier;
import io.github.anticipasean.girakkagraph.protocol.model.domain.operandset.jpa.JpaCriteriaOperandSet;
import io.github.anticipasean.girakkagraph.protocol.model.domain.operation.Operation;

import javax.persistence.criteria.Expression;
import java.util.function.Predicate;

public interface JpaIterativeOperator {

  enum Unary implements JpaCriteriaOperator<ExpressionSupplier>, Membership {

  // collection operations:

  /**
   * Create a predicate that tests whether a collection is empty.
   *
   * @param collection expression
   * @return is-empty predicate
   */
  //  <C extends Collection<?>> Predicate isEmpty(Expression<C> collection);

  /**
   * Create a predicate that tests whether a collection is not empty.
   *
   * @param collection expression
   * @return is-not-empty predicate
   */
  //  <C extends Collection<?>> Predicate isNotEmpty(Expression<C> collection);

  /**
   * Create an expression that tests the size of a collection.
   *
   * @param collection expression
   * @return size expression
   */
  //  <C extends java.util.Collection<?>> Expression<Integer> size(Expression<C> collection);

  /**
   * Create an expression that tests the size of a collection.
   *
   * @param collection collection
   * @return size expression
   */
  //  <C extends Collection<?>> Expression<Integer> size(C collection);

  /**
   * Create a predicate that tests whether an element is a member of a collection. If the collection
   * is empty, the predicate will be false.
   *
   * @param elem element expression
   * @param collection expression
   * @return is-member predicate
   */
  //  <E, C extends Collection<E>> Predicate isMember(Expression<E> elem, Expression<C> collection);

  /**
   * Create a predicate that tests whether an element is a member of a collection. If the collection
   * is empty, the predicate will be false.
   *
   * @param elem element
   * @param collection expression
   * @return is-member predicate
   */
  //  <E, C extends Collection<E>> Predicate isMember(E elem, Expression<C> collection);

  /**
   * Create a predicate that tests whether an element is not a member of a collection. If the
   * collection is empty, the predicate will be true.
   *
   * @param elem element expression
   * @param collection expression
   * @return is-not-member predicate
   */
  //  <E, C extends Collection<E>> Predicate isNotMember(Expression<E> elem, Expression<C>
  // collection);

  /**
   * Create a predicate that tests whether an element is not a member of a collection. If the
   * collection is empty, the predicate will be true.
   *
   * @param elem element
   * @param collection expression
   * @return is-not-member predicate
   */
  //  <E, C extends Collection<E>> Predicate isNotMember(E elem, Expression<C> collection);

  // get the values and keys collections of the Map, which may then
  // be passed to size(), isMember(), isEmpty(), etc

  /**
   * Create an expression that returns the values of a map.
   *
   * @param map map
   * @return collection expression
   */
  //  <V, M extends Map<?, V>> Expression<Collection<V>> values(M map);

  /**
   * Create an expression that returns the keys of a map.
   *
   * @param map map
   * @return set expression
   */
  //  <K, M extends Map<K, ?>> Expression<Set<K>> keys(M map);

  ;

    @Override
    public String callName() {
      return null;
    }

    @Override
    public Predicate<JpaCriteriaOperandSet> operandSetValidityTest() {
      return null;
    }

    @Override
    public Operation<JpaCriteriaOperandSet, ExpressionSupplier> operation() {
      return null;
    }

    @Override
    public Arity arity() {
      return null;
    }

    @Override
    public Class<?> memberType() {
      return Expression.class;
    }

    @Override
    public Class<?> groupObjectType() {
      return Expression.class;
    }
  }
}
