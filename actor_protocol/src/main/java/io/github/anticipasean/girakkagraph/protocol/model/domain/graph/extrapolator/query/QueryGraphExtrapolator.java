package io.github.anticipasean.girakkagraph.protocol.model.domain.graph.extrapolator.query;

import akka.actor.typed.javadsl.ActorContext;
import io.github.anticipasean.girakkagraph.protocol.base.command.Command;
import io.github.anticipasean.girakkagraph.protocol.model.domain.graph.BaseModelGraph;
import io.github.anticipasean.girakkagraph.protocol.model.domain.graph.ModelGraph;
import io.github.anticipasean.girakkagraph.protocol.model.domain.graph.QueryModelGraph;
import io.github.anticipasean.girakkagraph.protocol.model.domain.graph.extrapolator.ModelGraphExtrapolator;
import io.github.anticipasean.girakkagraph.protocol.model.domain.graph.vertex.RootVertex;
import java.util.NoSuchElementException;
import java.util.Optional;
import javax.persistence.EntityManager;

public interface QueryGraphExtrapolator extends ModelGraphExtrapolator<QueryModelGraph> {

  static QueryGraphExtrapolator newInstanceWithEntityManagerBaseModelGraphAndActorContext(
      EntityManager entityManager,
      BaseModelGraph baseModelGraph,
      ActorContext<Command> actorContext) {
    return new QueryGraphExtrapolatorImpl(entityManager, baseModelGraph, actorContext);
  }

  EntityManager entityManager();

  ModelGraph baseModelGraph();

  default RootVertex rootVertex() {
    baseModelGraph().checkVertices();
    return (RootVertex)
        Optional.of(baseModelGraph().asTree().firstKey())
            .filter(modelVertex -> modelVertex instanceof RootVertex)
            .orElseThrow(
                () ->
                    new NoSuchElementException(
                        "the first key within the tree generated by the asTree method of the model graph must be the root vertex"));
  }
}
