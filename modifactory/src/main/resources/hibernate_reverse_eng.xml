<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-reverse-engineering
    SYSTEM "http://hibernate.sourceforge.net/hibernate-reverse-engineering-3.0.dtd" >

<hibernate-reverse-engineering>
    <schema-selection match-catalog="Verification" match-schema="dbo" match-table=".*"/>
    <type-mapping>
        <!-- jdbc-type is name for java.sql.Types -->
        <!--        <sql-type jdbc-type="VARCHAR" length="20" hibernate-type="SomeUserType"/>-->
        <!--        <sql-type jdbc-type="CHAR" length="1" hibernate-type="java.lang.String" name="JOB_STATUS"/>-->
        <sql-type jdbc-type="CHAR" length="1" hibernate-type="yes_no"/>
        <!-- length, scale and precision can be used to specify the mapping precisely -->
        <sql-type jdbc-type="NUMERIC" precision="1" hibernate-type="java.lang.Boolean"/>
        <!-- the type-mappings are ordered. This mapping will be consulted last,
         thus overridden by the previous one if precision=1 for the column -->
        <sql-type jdbc-type="BIGINT" hibernate-type="java.lang.Long"/>
        <sql-type jdbc-type="TIMESTAMP" hibernate-type="java.time.OffsetDateTime"/>
        <sql-type jdbc-type="DATE" hibernate-type="java.time.LocalDateTime"/>
        <sql-type jdbc-type="NUMERIC" scale="2" hibernate-type="java.math.BigDecimal"/>
        <sql-type jdbc-type="SMALLINT" hibernate-type="java.lang.Integer"/>
        <sql-type jdbc-type="INTEGER" hibernate-type="java.lang.Integer"/>


    </type-mapping>
    <table-filter match-name=".*_DBA6491" exclude="true"/>
    <table-filter match-name=".*_RemovedRows" exclude="true"/>
    <table-filter match-name=".*" package="io.github.anticipasean.girakkagraph.entities"/>


    <!-- BIN$ is recycle bin tables in Oracle -->
    <!--    <table-filter match-name="BIN$.*" exclude="true" />-->

    <!-- Exclude DoNotWantIt from all catalogs/schemas -->
    <!--    <table-filter match-name="DoNotWantIt" exclude="true" />-->

    <!-- exclude all tables from the schema SCHEMA in catalog BAD. -->
    <!--    <table-filter match-catalog="BAD" match-schema="SCHEMA" match-name=".*" exclude="true" />-->

    <!-- table allows you to override/define how reverse engineering
         is done for a specific table -->
    <!--    <table name="ORDERS">-->
    <!--        <primary-key>-->
    <!--            &lt;!&ndash; setting up a specific id generator for a table &ndash;&gt;-->
    <!--            <generator class="sequence">-->
    <!--                <param name="table">seq_table</param>-->
    <!--            </generator>-->
    <!--            <key-column name="CUSTID"/>-->
    <!--        </primary-key>-->
    <!--        <column name="NAME" property="orderName" type="string"/>-->
    <!--        &lt;!&ndash; control many-to-one and set names for a specific named foreign key constraint &ndash;&gt;-->
    <!--        <foreign-key constraint-name="ORDER_CUST">-->
    <!--            <many-to-one property="customer"/>-->
    <!--            <set property="orders"/>-->
    <!--        </foreign-key>-->
    <!--        &lt;!&ndash; can also control a pure (shared pk) one-to-one  &ndash;&gt;-->
    <!--        <foreign-key constraint-name="ADDRESS_PERSON">-->
    <!--            <one-to-one exclude="false"/>-->
    <!--            <inverse-one-to-one exclude="true"/>-->
    <!--        </foreign-key>-->
    <!--    </table>-->

</hibernate-reverse-engineering>

